---
# Datatype and sniffer registration for SPIF & SVIF
- name: Register SPIF and SVIF datatypes
  blockinfile:
    path: "{{ datatypes_conf_dir }}"
    insertbefore: "</registration>"
    marker: "<!-- Moonshot datatypes -->"
    block: |
      <datatype extension="spif" type="galaxy.datatypes.triples:Spif" display_in_upload="true"/>
      <datatype extension="svif" type="galaxy.datatypes.text:Svif"  display_in_upload="true"/>
  when: "'extension=\"spif\"' not in lookup('file', datatypes_conf_dir)"

- name: Register SPIF sniffers
  blockinfile:
    path: "{{ datatypes_conf_dir }}"
    insertbefore: "</sniffers>"
    marker: "<!-- Moonshot sniffers -->"
    block: |
      <sniffer type="galaxy.datatypes.triples:Spif"/>
      <sniffer type="galaxy.datatypes.triples:ProgrammingLanguageIndependentFormat"/>
  when: "'ProgrammingLanguageIndependentFormat' not in lookup('file', datatypes_conf_dir)"

# Patch Galaxy core to add new datatype classes
- name: Ensure SPIF datatype class exists
  blockinfile:
    path: "{{ datatypes_dir }}/triples.py"
    marker: "# {mark} MOONSHOT-SPIF"
    insertafter: EOF
    block: |
      @build_sniff_from_prefix
      class Spif(xml.GenericXml, Triples):
          """
          Programming Language Independent Format (Michel Chaudron).
          """
          file_ext = "spif"

          def sniff_prefix(self, file_prefix: FilePrefix) -> bool:
              # SEON check
              is_seon = bool(
                  re.compile(r'xmlns:SEON_code="http://se-on.org/ontologies/domain-specific/2012/02/code.owl#"')
                  .search(file_prefix.contents_header)
              )
              # RDF check
              rdf_match = re.compile(
                  r'xmlns:([^=]*)="http://www.w3.org/1999/02/22-rdf-syntax-ns#"'
              ).search(file_prefix.contents_header)
              if not rdf_match:
                  return False
              rdf_group = rdf_match.group(1)
              return is_seon and f"{rdf_group}:RDF" in file_prefix.contents_header

          def set_peek(self, dataset: DatasetProtocol, **kwd) -> None:
              if not dataset.dataset.purged:
                  dataset.peek = data.get_file_peek(dataset.get_file_name())
                  dataset.blurb = "SPIF/RDF/XML triple data"
              else:
                  dataset.peek = "file does not exist"
                  dataset.blurb = "file purged from disk"
  when: "'class Spif(' not in lookup('file', datatypes_dir + '/triples.py')"

- name: Ensure SVIF datatype class exists
  blockinfile:
    path: "{{ datatypes_dir }}/text.py"
    marker: "# {mark} MOONSHOT-SVIF"
    insertafter: EOF
    block: |
      @build_sniff_from_prefix
      class Svif(Json):
          """
          Software Visualization Interchange Format (Satrio Adi Rukmono).
          """
          file_ext = "svif"
  when: "'class Svif(' not in lookup('file', datatypes_dir + '/text.py')"
